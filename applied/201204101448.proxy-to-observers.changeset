Changeset created on Tue Apr 10 14:48:45 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Observable proxy to DynamicHtml observers

    Added ObservableProxy (as "dynamichtml-global" observable) and Yield
    Removed any,all,call,do and compose as default globals.

Baseline version: svn+ssh://svn@svn.seecr.nl/svn/dynamichtml/workingsets/1.0-Avarus/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/dynamichtml/dynamichtml.py /home/avarus/development/dynamichtml/workingsets/1.0-Avarus/version_1/dynamichtml/dynamichtml.py
--- version_0/dynamichtml/dynamichtml.py	2012-04-10 08:58:53.000000000 +0200
+++ version_1/dynamichtml/dynamichtml.py	2012-04-10 16:48:41.000000000 +0200
@@ -37,11 +37,11 @@
 from time import time
 from urllib import urlencode
 from math import ceil
-from functools import partial
+from functools import partial, reduce
 
 from meresco.core import Observable, decorate
 
-from weightless.core import compose
+from weightless.core import compose, Yield
 
 from cq2utils.wrappers import wrapp
 from cq2utils import DirectoryWatcher
@@ -65,6 +65,16 @@
     return _escapeHtml(aString).replace('"','&quot;')
 
 
+class ObservableProxy(object):
+
+    def __init__(self, observable):
+        self.any = observable.any
+        self.all = observable.all
+        self.call = observable.call
+        self.do = observable.do
+        self.once = observable.once
+
+
 class DynamicHtml(Observable):
     def __init__(self, directories, reactor=None, prefix='', allowedModules=None, indexPage='', verbose=False, additionalGlobals=None, notFoundPage=None):
         Observable.__init__(self)
@@ -80,6 +90,8 @@
         self._initMonitoringForFileChanges(reactor)
         self._additionalGlobals = additionalGlobals or {}
 
+        self._observableProxy = ObservableProxy(self)
+
     def _loadModuleFromPaths(self):
         for directory in reversed(self._directories):
             for path in glob(directory + '/*.sf'):
@@ -123,7 +135,7 @@
             if moduleName in module.__dict__:
                 module.__dict__[moduleName] = newModule
 
-    def __import__(self, moduleName, globals=None, locals=None, fromlist=None):
+    def __import__(self, moduleName, globals=None, locals=None, fromlist=None, level=None):
         if moduleName in self._allowedModules:
             moduleObject = __import__(moduleName)
         else:
@@ -189,7 +201,7 @@
         while True:
             try:
                 firstValue = generators.next()
-                if callable(firstValue):
+                if firstValue is Yield or callable(firstValue):
                     yield firstValue
                     continue
                 firstLine = str(firstValue)
@@ -208,7 +220,7 @@
 
         try:
             for line in generators:
-                yield line if callable(line) else str(line)
+                yield line if line is Yield or callable(line) else str(line)
         except Exception:
             s = format_exc() #cannot be inlined
             yield "<pre>"
@@ -251,17 +263,16 @@
             'locals': locals,
             'type': type,
 
-            # observable stuff
-            'any': self.any,
-            'all': self.all,
-            'do': self.do,
-            'call': self.call,
+            # weightless stuff
+            'Yield': Yield,
+
+            # observables proxy
+            'observable': self._observableProxy,
 
             # commonly used/needed methods
             'escapeHtml': escapeHtml,
             'escapeXml': escapeXml,
             'bind_stream': lambda x:wrapp(bind_stream(x)),
-            'compose': compose,
             'time': time,
             'urlencode': lambda x: urlencode(x, doseq=True),
             'decorate': decorate,
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/dynamichtmltest.py /home/avarus/development/dynamichtml/workingsets/1.0-Avarus/version_1/test/dynamichtmltest.py
--- version_0/test/dynamichtmltest.py	2012-04-10 08:58:53.000000000 +0200
+++ version_1/test/dynamichtmltest.py	2012-04-10 16:48:41.000000000 +0200
@@ -31,7 +31,7 @@
 
 from seecr.test import SeecrTestCase, CallTrace
 
-from weightless.core import compose
+from weightless.core import compose, Yield
 from weightless.io import Reactor
 
 from dynamichtml import DynamicHtml
@@ -172,28 +172,39 @@
         self.assertTrue("HTTP/1.0 500 Internal Server Error\r\n\r\n" in result, result)
         self.assertTrue("integer division or modulo by zero" in result, result)
 
-
     def testObservability(self):
+        onces = []
+        dos = []
         class Something(object):
-            def returnSomething(*args, **kwargs):
-                return "something"
-            def generateSomething(*args, **kwargs):
-                yield "something"
-            def something(*args, **kwargs):
-                pass
+            def callSomething(self, *args, **kwargs):
+                return "call"
+            def allSomething(self, *args, **kwargs):
+                yield "all"
+            def anySomething(self, *args, **kwargs):
+                yield "any"
+                raise StopIteration('retval')
+            def doSomething(self, *args, **kwargs):
+                dos.append(True)
+            def onceSomething(self, *args, **kwargs):
+                onces.append(True)
 
         open(self.tempdir+'/afile.sf', 'w').write("""#
 def main(*args, **kwargs):
-  yield call.returnSomething()
-  for i in all.generateSomething():
-      yield i
-  do.something()
-  yield any.generateSomething()
+  result = observable.call.callSomething()
+  yield result
+  yield observable.all.allSomething()
+  result = yield observable.any.anySomething()
+  assert result == 'retval'
+  observable.do.doSomething()
+  yield observable.once.onceSomething()
 """)
         d = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
         d.addObserver(Something())
         result = d.handleRequest(scheme='http', netloc='host.nl', path='/afile', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
-        self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\nsomethingsomethingsomething', ''.join(result))
+        self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\ncallallany', ''.join(result))
+
+        self.assertEquals([True], dos)
+        self.assertEquals([True], onces)
 
     def testObservabilityOutsideMainOnModuleLevel(self):
         class X(object):
@@ -201,7 +212,7 @@
                 return "eks"
 
         open(self.tempdir+'/afile.sf', 'w').write("""#
-x = call.getX()
+x = observable.call.getX()
 def main(*args, **kwargs):
   yield x
 """)
@@ -643,6 +654,21 @@
         self.assertTrue(callable(r[1]))
         self.assertEquals("text2", r[2])
 
+    def testPassYield(self):
+        reactor = Reactor()
+        tmplatename = join(self.tempdir, 'withyield.sf')
+        d = DynamicHtml([self.tempdir], reactor=reactor)
+        open(tmplatename, 'w').write(
+                "def main(*args, **kwargs):\n"
+                "    yield 'HTTP/1.0 200 Ok\\r\\n\\r\\n'\n"
+                "    yield Yield\n"
+                "    yield 'text2'\n")
+        reactor.step()
+        r = list(d.handleRequest(path='/withyield'))
+        self.assertEquals("HTTP/1.0 200 Ok\r\n\r\n", r[0])
+        self.assertTrue(Yield is r[1], r[1])
+        self.assertEquals("text2", r[2])
+
     def testPassCallableAsFirstThing(self):
         reactor = Reactor()
         tmplatename = join(self.tempdir, 'withcallable.sf')
