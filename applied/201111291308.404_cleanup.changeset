Changeset created on Tue Nov 29 13:08:21 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Cleanup of 404 handling.

    Instead of redirecting notFoundPage is now rendered for current path.

Baseline version: svn+ssh://svn@svn.cq2.org/svn/dynamichtml/workingsets/0.7.5-Seecrweb/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/dynamichtml/dynamichtml.py version_1/dynamichtml/dynamichtml.py
--- version_0/dynamichtml/dynamichtml.py	2011-11-29 14:07:33.000000000 +0100
+++ version_1/dynamichtml/dynamichtml.py	2011-11-29 14:08:19.000000000 +0100
@@ -3,6 +3,7 @@
 #
 #    DynamicHtml is a template engine based on generators, and a sequel to Slowfoot.
 #    Copyright (C) 2008-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
 #
 #    This file is part of DynamicHtml.
 #
@@ -43,6 +44,7 @@
 from cq2utils.wrappers import wrapp
 from cq2utils import DirectoryWatcher
 
+
 class Module:
     def __init__(self, moduleGlobals):
         self.__dict__ = moduleGlobals
@@ -60,9 +62,9 @@
 def escapeHtml(aString):
     return _escapeHtml(aString).replace('"','&quot;')
 
-class DynamicHtml(Observable):
 
-    def __init__(self, directories, reactor=None, prefix='', allowedModules=None, indexPage='', verbose=False, additionalGlobals=None, notFoundPage=None, notFoundPageIsRedirect=False):
+class DynamicHtml(Observable):
+    def __init__(self, directories, reactor=None, prefix='', allowedModules=None, indexPage='', verbose=False, additionalGlobals=None, notFoundPage=None):
         Observable.__init__(self)
         self._verbose = verbose
         if type(directories) != list:
@@ -71,7 +73,6 @@
         self._prefix = prefix
         self._indexPage = indexPage
         self._notFoundPage = notFoundPage
-        self._notFoundPageIsRedirect = notFoundPageIsRedirect
         self._allowedModules = allowedModules or []
         self._modules = {}
         self._initMonitoringForFileChanges(reactor)
@@ -137,15 +138,17 @@
             self._loadModuleFromPaths()
         return self._modules
 
-    def _createMainGenerator(self, head, tail, Headers, arguments, **kwargs):
+    def _createMainGenerator(self, head, tail, scheme='', netloc='', path='', query='', Headers=None, arguments=None, **kwargs):
+        Headers = Headers or {}
+        arguments = arguments or {}
         if tail == None:
             nextGenerator =  (i for i in [])
         else:
             nextHead, nextTail = self._splitPath(tail)
-            nextGenerator = self._createMainGenerator(nextHead, nextTail, Headers=Headers, arguments=arguments, **kwargs)
+            nextGenerator = self._createMainGenerator(nextHead, nextTail, scheme=scheme, netloc=netloc, path=path, query=query, Headers=Headers, arguments=arguments, **kwargs)
         modules = self._getModules()
         main = modules[head].main
-        yield main(Headers=Headers, arguments=arguments, pipe=nextGenerator, **kwargs)
+        yield main(scheme=scheme, netloc=netloc, path=path, query=query, Headers=Headers, arguments=arguments, pipe=nextGenerator, **kwargs)
 
     def _splitPath(self, aPath):
         normalizedPath = '/'.join(p for p in aPath.split('/') if p)
@@ -153,41 +156,32 @@
             return normalizedPath[:normalizedPath.index('/')], normalizedPath[normalizedPath.index('/'):]
         return normalizedPath, None
 
-    def handleRequest(self, scheme='', netloc='', path='', query='', fragments='', arguments={}, Headers={}, **kwargs):
+    def _createGenerators(self, path, scheme='', **kwargs):
+        head, tail = self._splitPath(path)
+        if not head in self._getModules():
+            raise DynamicHtmlException('File "%s" does not exist.' % head)
+        return compose(self._createMainGenerator(head, tail, path=path, **kwargs))
 
+    def handleRequest(self, path='', **kwargs):
         path = path[len(self._prefix):]
         if path == '/' and self._indexPage:
             newLocation = self._indexPage
+            arguments = kwargs.get('arguments', {})
             if arguments:
                 newLocation = '%s?%s' % (newLocation, urlencode(arguments, doseq=True))
             yield redirectTo(newLocation)
             return
 
-        def createGenerators(path):
-            head, tail = self._splitPath(path)
-            if not head in self._getModules():
-                raise DynamicHtmlException('File "%s" does not exist.' % head)
-            return compose(self._createMainGenerator(head, tail, Headers=Headers, arguments=arguments, path=path, scheme=scheme, netloc=netloc, query=query, **kwargs))
-
         try:
-            generators = createGenerators(path)
+            generators = self._createGenerators(path, **kwargs)
         except DynamicHtmlException, e:
-            FourOFourMessage = 'HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8\r\n\r\n%s'
-            if self._notFoundPageIsRedirect:
-                response = redirectTo(self._notFoundPage)
-                if path == self._notFoundPage:
-                    response = FourOFourMessage % str(e)
-                yield response
+            if self._notFoundPage is None:
+                yield FourOFourMessage + str(e)
                 return
-
-            if not self._notFoundPage is None:
-                try:
-                    generators = createGenerators(self._notFoundPage)
-                except DynamicHtmlException, innerException:
-                    yield FourOFourMessage % str(innerException)
-                    return
-            else:
-                yield FourOFourMessage % str(e)
+            try:
+                generators = self._createGenerators(self._notFoundPage, **kwargs)
+            except DynamicHtmlException, innerException:
+                yield FourOFourMessage + str(innerException)
                 return
 
         while True:
@@ -278,3 +272,6 @@
             'http': Http()
         }
         return result
+            
+FourOFourMessage = 'HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8\r\n\r\n'
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/dynamichtmltest.py version_1/test/dynamichtmltest.py
--- version_0/test/dynamichtmltest.py	2011-11-29 14:07:33.000000000 +0100
+++ version_1/test/dynamichtmltest.py	2011-11-29 14:08:19.000000000 +0100
@@ -3,6 +3,7 @@
 #
 #    DynamicHtml is a template engine based on generators, and a sequel to Slowfoot.
 #    Copyright (C) 2008-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
 #
 #    This file is part of DynamicHtml.
 #
@@ -37,7 +38,7 @@
 
     def testFileNotFound(self):
         d = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = d.handleRequest('http', 'host.nl', '/a/path', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/a/path', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8\r\n\r\nFile "a" does not exist.', ''.join(result))
 
     def testCustomFileNotFound(self):
@@ -46,42 +47,28 @@
     yield "404 Handler"
 """)
         d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", reactor=CallTrace('Reactor'))
-        result = d.handleRequest('http', 'host.nl', '/a/path', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/a/path', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         headers, body = ''.join(result).split('\r\n\r\n')
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8', headers)
         self.assertEquals('404 Handler', body)
 
-    def testCustomFileNotFoundWithRedirect(self):
-        d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", notFoundPageIsRedirect=True, reactor=CallTrace('Reactor'))
-        result = d.handleRequest('http', 'host.nl', '/a/path', '?query=something', '#fragments', {'query': 'something'})
-        headers, body = ''.join(result).split('\r\n\r\n')
-        self.assertEquals('HTTP/1.0 302 Found\r\nLocation: /redirect_to_me', headers)
-        self.assertEquals('', body)
-
     def testCustomFileNotFoundToFileThatDoesExist(self):
         d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", reactor=CallTrace('Reactor'))
-        result = d.handleRequest('http', 'host.nl', '/a/path', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/a/path', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         headers, body = ''.join(result).split('\r\n\r\n')
         self.assertEquals('HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8', headers)
         self.assertEquals('File "redirect_to_me" does not exist.', body)
     
-    def testCustomFileNotFoundToFileThatDoesExistWithRedirect(self):
-        d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", notFoundPageIsRedirect=True, reactor=CallTrace('Reactor'))
-        result = d.handleRequest('http', 'host.nl', '/redirect_to_me', '?query=something', '#fragments', {'query': 'something'})
-        headers, body = ''.join(result).split('\r\n\r\n')
-        self.assertEquals('HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8', headers)
-        self.assertEquals('File "redirect_to_me" does not exist.', body)
-
     def testASimpleFlatFile(self):
         open(self.tempdir+'/afile.sf', 'w').write('def main(*args, **kwargs): \n  yield "John is a nut"')
         d = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = d.handleRequest('http', 'host.nl', '/afile', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/afile', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\nJohn is a nut', ''.join(result))
 
     def testPrefix(self):
         open(self.tempdir+'/afile.sf', 'w').write('def main(*args, **kwargs): \n  yield "John is a nut"')
         d = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'), prefix='/prefix')
-        result = d.handleRequest('http', 'host.nl', '/prefix/afile', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/prefix/afile', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\nJohn is a nut', ''.join(result))
 
     def testSimpleGenerator(self):
@@ -92,7 +79,7 @@
 """
         )
         s = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = ''.join(s.handleRequest('http', 'host.nl', '/testSimple', '?query=something', '#fragments', {'query': 'something'}))
+        result = ''.join(s.handleRequest(scheme='http', netloc='host.nl', path='/testSimple', query='?query=something', fragments='#fragments', arguments={'query': 'something'}))
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\naapnootmies', result)
 
     def testIncludeOther(self):
@@ -110,7 +97,7 @@
 """
         )
         s = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = ''.join(compose(s.handleRequest('http', 'host.nl', '/other', '?query=something', '#fragments', {'query': 'something'})))
+        result = ''.join(compose(s.handleRequest(scheme='http', netloc='host.nl', path='/other', query='?query=something', fragments='#fragments', arguments={'query': 'something'})))
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\nmeissnake', result)
 
     def testUseModuleLocals(self):
@@ -121,7 +108,7 @@
 """
             )
         s = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = ''.join(s.handleRequest('http', 'host.nl', '/testSimple', '?query=something', '#fragments', {'query': 'something'}))
+        result = ''.join(s.handleRequest(scheme='http', netloc='host.nl', path='/testSimple', query='?query=something', fragments='#fragments', arguments={'query': 'something'}))
         self.assertTrue('local is available' in result, result)
 
     def testUseModuleLocalsRecursive(self):
@@ -136,7 +123,7 @@
 """
             )
         s = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = ''.join(s.handleRequest('http', 'host.nl', '/testSimple', '?query=something', '#fragments', {'query': 'something'}))
+        result = ''.join(s.handleRequest(scheme='http', netloc='host.nl', path='/testSimple', query='?query=something', fragments='#fragments', arguments={'query': 'something'}))
         self.assertTrue('recursiveModuleLocal result' in result, result)
 
     def testUseModuleLocalsCrissCross(self):
@@ -152,7 +139,7 @@
 """
             )
         s = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = ''.join(s.handleRequest('http', 'host.nl', '/testSimple', '?query=something', '#fragments', {'query': 'something'}))
+        result = ''.join(s.handleRequest(scheme='http', netloc='host.nl', path='/testSimple', query='?query=something', fragments='#fragments', arguments={'query': 'something'}))
         self.assertTrue('g(f())' in result, result)
 
     def testErrorWhileImporting(self):
@@ -165,7 +152,8 @@
 """
             )
             s = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-            result = ''.join(s.handleRequest('http', 'host.nl', '/testSimple', '?query=something', '#fragments', {'query': 'something'}))
+            result = ''.join(s.handleRequest(scheme='http', netloc='host.nl', path='/testSimple', query='?query=something', fragments='#fragments', arguments={'query': 'something'}))
+
             self.assertTrue('x = 1/0\nZeroDivisionError: integer division or modulo by zero' in result)
         finally:
             sys.stderr = sys.__stderr__
@@ -182,7 +170,7 @@
 """
         )
         s = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
-        result = ''.join(s.handleRequest('http', 'host.nl', '/testSimple', '?query=something', '#fragments', {'query': 'something'}))
+        result = ''.join(s.handleRequest(scheme='http', netloc='host.nl', path='/testSimple', query='?query=something', fragments='#fragments', arguments={'query': 'something'}))
         self.assertTrue("HTTP/1.0 500 Internal Server Error\r\n\r\n" in result, result)
         self.assertTrue("integer division or modulo by zero" in result, result)
 
@@ -202,7 +190,7 @@
 """)
         d = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
         d.addObserver(Something())
-        result = d.handleRequest('http', 'host.nl', '/afile', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/afile', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\nsomethingsomething', ''.join(result))
 
     def testObservabilityOutsideMainOnModuleLevel(self):
@@ -217,7 +205,7 @@
 """)
         d = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
         d.addObserver(X())
-        result = d.handleRequest('http', 'host.nl', '/afile', '', '', {})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/afile', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\neks', ''.join(result))
 
 
@@ -231,7 +219,7 @@
 """)
         reactor.step()
 
-        result = d.handleRequest('http', 'host.nl', '/file', '?query=something', '#fragments', arguments={'query': 'something'}, Headers={'key': 'value'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file', query='?query=something', fragments='#fragments', arguments={'query': 'something'}, Headers={'key': 'value'})
         self.assertEquals("""HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\n{'key': 'value'}""", ''.join(result))
 
 
@@ -242,7 +230,7 @@
         open(self.tempdir+'/file1.sf', 'w').write('def main(*args, **kwargs): \n  yield "one"')
         reactor.step()
 
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\none', ''.join(result))
 
     def testModifyFileCausesReload(self):
@@ -251,13 +239,13 @@
         open(self.tempdir+'/file1.sf', 'w').write('def main(*args, **kwargs): \n  yield "one"')
         d = DynamicHtml([self.tempdir], reactor=reactor)
 
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\none', ''.join(result))
 
         open(self.tempdir+'/file1.sf', 'w').write('def main(*args, **kwargs): \n  yield "two"')
         reactor.step()
 
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\ntwo', ''.join(result))
 
     def testFileMovedIntoDirectoryCausesReload(self):
@@ -266,13 +254,13 @@
         open('/tmp/file1.sf', 'w').write('def main(*args, **kwargs): \n  yield "one"')
         d = DynamicHtml([self.tempdir], reactor=reactor)
 
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8\r\n\r\nFile "file1" does not exist.', ''.join(result))
 
         rename('/tmp/file1.sf', self.tempdir+'/file1.sf')
         reactor.step()
 
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\none', ''.join(result))
 
     def testReloadImportedModules(self):
@@ -290,7 +278,7 @@
 """)
 
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = ''.join(d.handleRequest('http', 'host.nl', '/file2'))
+        result = ''.join(d.handleRequest(scheme='http', netloc='host.nl', path='/file2'))
         self.assertTrue('original template word!' in result, result)
 
         open(self.tempdir + '/file1.sf', 'w').write("""
@@ -299,7 +287,7 @@
 """)
 
         reactor.step()
-        result = ''.join(d.handleRequest('http', 'host.nl', '/file2'))
+        result = ''.join(d.handleRequest(scheme='http', netloc='host.nl', path='/file2'))
         self.assertTrue('changed template word!' in result, result)
 
     def testBuiltins(self):
@@ -312,7 +300,7 @@
 """)
 
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\nTrueFalse', ''.join(result))
 
         open(self.tempdir + '/file1.sf', 'w').write("""
@@ -322,7 +310,7 @@
 """)
 
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\n12', ''.join(x for x in result))
 
         open(self.tempdir + '/file1.sf', 'w').write("""
@@ -331,7 +319,7 @@
 """)
 
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\n&amp;&lt;&gt;&quot;', ''.join(result))
 
         open(self.tempdir + '/file1.sf', 'w').write("""
@@ -340,7 +328,7 @@
 """)
 
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('''HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\n[(1, 'one'), (2, 'two'), (3, 'three')]''', ''.join(result))
 
 
@@ -355,7 +343,7 @@
 """)
 
         d = DynamicHtml([self.tempdir], reactor=reactor, allowedModules=['Ft'])
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         resultText = ''.join(result)
         self.assertTrue(resultText.endswith("/Ft/__init__.pyc'>"), resultText)
 
@@ -367,7 +355,7 @@
 """)
 
         reactor.step()
-        result = d.handleRequest('http', 'host.nl', '/file1', '?query=something', '#fragments', {'query': 'something'})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/file1', query='?query=something', fragments='#fragments', arguments={'query': 'something'})
         self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8\r\n\r\n\n4Suite: an open-source platform for XML and RDF processing.\n\nCopyright 2004 Fourthought, Inc. (USA).\nDetailed license and copyright information: http://4suite.org/COPYRIGHT\nProject home, documentation, distributions: http://4suite.org/\n', ''.join(result))
 
     def testPipelining(self):
@@ -385,7 +373,7 @@
 """)
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/pipe1/pipe2', '', '', {})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/pipe1/pipe2')
         headers, message = ''.join(result).split('\r\n\r\n')
         self.assertEquals('onetwothreefour', message)
 
@@ -403,7 +391,7 @@
 
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/' + '/'.join(filenames), '', '', {})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/' + '/'.join(filenames))
         headers, message = ''.join(result).split('\r\n\r\n')
         self.assertEquals('0123456789', message)
 
@@ -425,7 +413,7 @@
 """)
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/pipe1/pipe2', '', '', {})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/pipe1/pipe2')
         headers, message = ''.join(result).split('\r\n\r\n')
         self.assertTrue('integer division or modulo by zero' in message)
 
@@ -440,7 +428,7 @@
 """)
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/page', '', '', {})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/page')
         headers, message = ''.join(result).split('\r\n\r\n')
         self.assertEquals('startend', message)
 
@@ -451,7 +439,7 @@
 """)
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = d.handleRequest('http', 'host.nl', '/page/doesnotexist', '', '', {})
+        result = d.handleRequest(scheme='http', netloc='host.nl', path='/page/doesnotexist')
         headers, message = ''.join(result).split('\r\n\r\n')
         self.assertEquals('nopipe', message)
 
@@ -486,7 +474,7 @@
 """)
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = ''.join(d.handleRequest('http', 'host.nl', '/page2', '', '', {}))
+        result = ''.join(d.handleRequest(scheme='http', netloc='host.nl', path='/page2'))
         self.assertTrue('page1' in result, result)
 
     def testIgnoreNonSFExtensions(self):
@@ -496,7 +484,7 @@
 """)
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = ''.join(d.handleRequest('http', 'host.nl', '/page', '', '', {}))
+        result = ''.join(d.handleRequest(scheme='http', netloc='host.nl', path='/page'))
         self.assertTrue('should not happen' not in result, result)
 
     def testHandlePOSTRequest(self):
@@ -509,7 +497,7 @@
         )
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = ''.join(d.handleRequest('http', 'host.nl', '/page', '', '', arguments={}, RequestURI= 'http://host.nl/page' , Method='POST', Body='label=value&otherlabel=value', Headers={'Content-Type':'application/x-www-form-urlencoded'}))
+        result = ''.join(d.handleRequest(scheme='http', netloc='host.nl', path='/page', arguments={}, RequestURI='http://host.nl/page', Method='POST', Body='label=value&otherlabel=value', Headers={'Content-Type':'application/x-www-form-urlencoded'}))
 
         self.assertTrue('Content-Type: application/x-www-form-urlencoded\nBody: label=value&otherlabel=value\nMethod: POST\n' in result, result)
 
@@ -520,7 +508,7 @@
 """)
         reactor = Reactor()
         d = DynamicHtml([self.tempdir], reactor=reactor)
-        result = ''.join(d.handleRequest('http', 'host.nl', '/page', '', '', {}))
+        result = ''.join(d.handleRequest(scheme='http', netloc='host.nl', path='/page'))
         self.assertEquals('HTTP/1.0 302 Found\r\nLocation: /here\r\n\r\n', result)
 
     def testKeywordArgumentsArePassed(self):
@@ -528,7 +516,7 @@
         d = DynamicHtml([self.tempdir], reactor=CallTrace('Reactor'))
         result = ''.join(d.handleRequest(path='/afile', netloc='localhost', key='value', key2='value2'))
         header, body = result.split('\r\n\r\n')
-        self.assertEquals({'Headers':MATCHALL, 'arguments':MATCHALL, 'path':'/afile', 'netloc':'localhost', 'key':'value', 'key2':'value2', 'scheme':'', 'query': ''}, eval(body))
+        self.assertEquals({'Headers':{}, 'arguments':{}, 'path':'/afile', 'netloc':'localhost', 'key':'value', 'key2':'value2', 'scheme':'', 'query': ''}, eval(body))
 
     def createTwoPaths(self):
         path1 = join(self.tempdir, '1')
@@ -672,4 +660,3 @@
         self.assertTrue(callable(r[4]))
         self.assertEquals("text2", r[5])
 
-
