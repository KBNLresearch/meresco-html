Changeset created on Tue Nov 29 10:16:30 UTC 2011 by Seecr (Seek You Too B.V.)

Description: 404 page is either included or a redirect

    The 404 page can now be included, preserving the requested url, or it can be a 302 Found redirect

Baseline version: svn+ssh://svn@svn.cq2.org/svn/dynamichtml/workingsets/0.7.4-Seecrweb/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/dynamichtml/dynamichtml.py version_1/dynamichtml/dynamichtml.py
--- version_0/dynamichtml/dynamichtml.py	2011-11-29 10:48:18.000000000 +0100
+++ version_1/dynamichtml/dynamichtml.py	2011-11-29 11:16:26.000000000 +0100
@@ -62,7 +62,7 @@
 
 class DynamicHtml(Observable):
 
-    def __init__(self, directories, reactor=None, prefix='', allowedModules=None, indexPage='', verbose=False, additionalGlobals=None, notFoundPage=None):
+    def __init__(self, directories, reactor=None, prefix='', allowedModules=None, indexPage='', verbose=False, additionalGlobals=None, notFoundPage=None, notFoundPageIsRedirect=False):
         Observable.__init__(self)
         self._verbose = verbose
         if type(directories) != list:
@@ -71,6 +71,7 @@
         self._prefix = prefix
         self._indexPage = indexPage
         self._notFoundPage = notFoundPage
+        self._notFoundPageIsRedirect = notFoundPageIsRedirect
         self._allowedModules = allowedModules or []
         self._modules = {}
         self._initMonitoringForFileChanges(reactor)
@@ -162,18 +163,32 @@
             yield redirectTo(newLocation)
             return
 
-        try:
+        def createGenerators(path):
             head, tail = self._splitPath(path)
             if not head in self._getModules():
                 raise DynamicHtmlException('File "%s" does not exist.' % head)
-            generators = compose(self._createMainGenerator(head, tail, Headers=Headers, arguments=arguments, path=path, scheme=scheme, netloc=netloc, query=query, **kwargs))
+            return compose(self._createMainGenerator(head, tail, Headers=Headers, arguments=arguments, path=path, scheme=scheme, netloc=netloc, query=query, **kwargs))
+
+        try:
+            generators = createGenerators(path)
         except DynamicHtmlException, e:
-            response = 'HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8\r\n\r\n' + str(e)
-            if not self._notFoundPage is None:
+            FourOFourMessage = 'HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8\r\n\r\n%s'
+            if self._notFoundPageIsRedirect:
                 response = redirectTo(self._notFoundPage)
+                if path == self._notFoundPage:
+                    response = FourOFourMessage % str(e)
+                yield response
+                return
 
-            yield response
-            return
+            if not self._notFoundPage is None:
+                try:
+                    generators = createGenerators(self._notFoundPage)
+                except DynamicHtmlException, innerException:
+                    yield FourOFourMessage % str(innerException)
+                    return
+            else:
+                yield FourOFourMessage % str(e)
+                return
 
         while True:
             try:
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/dynamichtmltest.py version_1/test/dynamichtmltest.py
--- version_0/test/dynamichtmltest.py	2011-11-29 10:48:18.000000000 +0100
+++ version_1/test/dynamichtmltest.py	2011-11-29 11:16:26.000000000 +0100
@@ -41,10 +41,36 @@
         self.assertEquals('HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8\r\n\r\nFile "a" does not exist.', ''.join(result))
 
     def testCustomFileNotFound(self):
+        open(join(self.tempdir, "redirect_to_me.sf"), 'w').write("""
+def main(**kwargs):
+    yield "404 Handler"
+""")
         d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", reactor=CallTrace('Reactor'))
         result = d.handleRequest('http', 'host.nl', '/a/path', '?query=something', '#fragments', {'query': 'something'})
-        headers, message = ''.join(result).split('\r\n\r\n')
+        headers, body = ''.join(result).split('\r\n\r\n')
+        self.assertEquals('HTTP/1.0 200 Ok\r\nContent-Type: text/html; charset=utf-8', headers)
+        self.assertEquals('404 Handler', body)
+
+    def testCustomFileNotFoundWithRedirect(self):
+        d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", notFoundPageIsRedirect=True, reactor=CallTrace('Reactor'))
+        result = d.handleRequest('http', 'host.nl', '/a/path', '?query=something', '#fragments', {'query': 'something'})
+        headers, body = ''.join(result).split('\r\n\r\n')
         self.assertEquals('HTTP/1.0 302 Found\r\nLocation: /redirect_to_me', headers)
+        self.assertEquals('', body)
+
+    def testCustomFileNotFoundToFileThatDoesExist(self):
+        d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", reactor=CallTrace('Reactor'))
+        result = d.handleRequest('http', 'host.nl', '/a/path', '?query=something', '#fragments', {'query': 'something'})
+        headers, body = ''.join(result).split('\r\n\r\n')
+        self.assertEquals('HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8', headers)
+        self.assertEquals('File "redirect_to_me" does not exist.', body)
+    
+    def testCustomFileNotFoundToFileThatDoesExistWithRedirect(self):
+        d = DynamicHtml([self.tempdir], notFoundPage="/redirect_to_me", notFoundPageIsRedirect=True, reactor=CallTrace('Reactor'))
+        result = d.handleRequest('http', 'host.nl', '/redirect_to_me', '?query=something', '#fragments', {'query': 'something'})
+        headers, body = ''.join(result).split('\r\n\r\n')
+        self.assertEquals('HTTP/1.0 404 File not found\r\nContent-Type: text/html; charset=utf-8', headers)
+        self.assertEquals('File "redirect_to_me" does not exist.', body)
 
     def testASimpleFlatFile(self):
         open(self.tempdir+'/afile.sf', 'w').write('def main(*args, **kwargs): \n  yield "John is a nut"')
